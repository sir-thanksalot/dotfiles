agent () {
    eval $(ssh-agent)
    ssh-add
}

# The following git_ functions are taken from https://github.com/jcgoble3/gitstuff/blob/master/gitprompt.sh
git_branch() {
    # -- Finds and outputs the current branch name by parsing the list of
    #    all branches
    # -- Current branch is identified by an asterisk at the beginning
    # -- If not in a Git repository, error message goes to /dev/null and
    #    no output is produced
    git branch --no-color 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}

git_status() {
    # Outputs a series of indicators based on the status of the
    # working directory:
    # + changes are staged and ready to commit
    # ! unstaged changes are present
    # ? untracked files are present
    # S changes have been stashed
    # P local commits need to be pushed to the remote
    local status="$(git status --porcelain 2>/dev/null)"
    local output=''
    [[ -n $(egrep '^[MADRC]' <<<"$status") ]] && output="$output+"
    [[ -n $(egrep '^.[MD]' <<<"$status") ]] && output="$output!"
    [[ -n $(egrep '^\?\?' <<<"$status") ]] && output="$output?"
    
    [[ -n $(git stash list) ]] && output="${output}S"
    [[ -n $(git log --branches --not --remotes) ]] && output="${output}P"
    [[ -n $output ]] && output="|$output"  # separate from branch name
    echo $output
}

git_color() {
    # Receives output of git_status as argument; produces appropriate color
    # code based on status of working directory:
    # - White if everything is clean
    # - Green if all changes are staged
    # - Red if there are uncommitted changes with nothing staged
    # - Yellow if there are both staged and unstaged changes
    # - Blue if there are unpushed commits
    local staged=$([[ $1 =~ \+ ]] && echo yes)
    local dirty=$([[ $1 =~ [!\?] ]] && echo yes)
    local needs_push=$([[ $1 =~ P ]] && echo yes)
    if [[ -n $staged ]] && [[ -n $dirty ]]; then
        echo -e '\033[33m'  # yellow
    elif [[ -n $staged ]]; then
        echo -e '\033[1;32m'  #bold  green
    elif [[ -n $dirty ]]; then
        echo -e '\033[31m'  # red
    elif [[ -n $needs_push ]]; then
        echo -e '\033[1;34m' # bold blue
    else
        echo -e '\033[1;37m'  # bold white
    fi
}

git_prompt() {
    # First, get the branch name...
    local branch=$(git_branch)
    # Empty output? Then we're not in a Git repository, so bypass the rest
    # of the function, producing no output
    if [[ -n $branch ]]; then
        local state=$(git_status)
        local color=$(git_color $state)
        # Now output the actual code to insert the branch and status
        echo -e "\x01$color\x02[$branch$state]\x01\033[00m\x02"  # last bit resets color
    fi
}

install_nvm() {
    if [ ! -d "$HOME/.nvm" ] ; then
        export NVM_DIR="$HOME/.nvm" && (
        git clone https://github.com/nvm-sh/nvm.git "$NVM_DIR"
        cd "$NVM_DIR"
        git checkout `git describe --abbrev=0 --tags --match "v[0-9]*" $(git rev-list --tags --max-count=1)`
    ) && \. "$NVM_DIR/nvm.sh"
    else 
        echo "nvm already installed. Version $(nvm --version)"
    fi
}

update_nvm() {
    if [ -d "$HOME/.nvm" ] ; then
        echo "Trying to update nvm version $(nvm --version)..."
        (
            cd "$NVM_DIR"
            git fetch --tags origin
            git checkout `git describe --abbrev=0 --tags --match "v[0-9]*" $(git rev-list --tags --max-count=1)`
        ) && \. "$NVM_DIR/nvm.sh"
        echo "Now at version $(nvm --version)"
    fi
}

install_golang() {
    goroot="$HOME/.go"
    gopath="$HOME/go"
    os="$(uname -s)"
    arch="$(uname -m)"
    case $os in
        "Linux")
            case $arch in
            "x86_64")
                arch=amd64
                ;;
            "aarch64")
                arch=arm64
                ;;
            "armv6")
                arch=armv6l
                ;;
            "armv8")
                arch=arm64
                ;;
            .*386.*)
                arch=386
                ;;
            esac
            platform="linux-$arch"
        ;;
    esac

    if [ -z "$platform" ]; then
        echo "Unknown OS/Architecture."
        return 1
    fi
    version=$(wget -qO- "https://golang.org/VERSION?m=text")
    package_name="$version.$platform.tar.gz"
    temp_dir=$(mktemp -d)
    wget https://storage.googleapis.com/golang/$package_name -O "$temp_dir/go.tar.gz"
    if [ $? -ne 0 ]; then
        echo "Download failed! Exiting."
        return 1
    fi
    mkdir -p "$goroot"
    tar -C "$goroot" --strip-components=1 -xzf "$temp_dir/go.tar.gz"
    mkdir -p "${gopath}/"{src,pkg,bin}
    rm -f "$temp_dir/go.tar.gz"
    echo "sucessfully golang version $version installed. Sourcing profile now"
    . $HOME/.bash_profile
}

# For local changes
# MUST be last line
[ -f .functions.local ] && source .functions.local